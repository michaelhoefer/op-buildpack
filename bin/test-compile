#!/bin/bash
#
# Usage:
# bin/test-compile BUILD_DIR CACHE_DIR ENV_DIR
# - BUILD_DIR is the location of the app.
# - CACHE_DIR is a location the buildpack can use to cache build artifacts between builds.
# - ENV_DIR is a directory that contains a file for each of the applicationâ€™s configuration variables.
#
# The test-compile script is executed for CI runs.

START_TIME=$SECONDS

# set -x
set -o errexit      # always exit on error
set -o pipefail     # don't ignore exit codes when piping output
unset GIT_DIR       # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# set defaults for optional config vars
: ${SFDX_BUILDPACK_DEBUG:="false"}

### Load additional functions
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/sfdx.sh
source $BP_DIR/lib/stdlib.sh

### Execute
header 'Welcome to the One Pipeline Buildpack'
log "Exporting environment directories ..."
export_env "$ENV_DIR"

# Setup local paths
log "Setting up paths ..."

debug "BUILD_DIR: $BUILD_DIR"
debug "CACHE_DIR: $CACHE_DIR"
debug "ENV_DIR: $ENV_DIR"
debug "BP_DIR: $BP_DIR"

setup_dirs "$BUILD_DIR"

# CLI details
debug "SFDX version: $(sfdx version)"
debug "Plugins: $(sfdx plugins --core)"

# Log config
debug "SFDX_DEV_HUB_AUTH_URL: $SFDX_DEV_HUB_AUTH_URL"
debug "HEROKU_TEST_RUN_BRANCH: $HEROKU_TEST_RUN_BRANCH"
debug "HEROKU_TEST_RUN_COMMIT_VERSION: $HEROKU_TEST_RUN_COMMIT_VERSION"
debug "HEROKU_TEST_RUN_ID: $HEROKU_TEST_RUN_ID"

# Set target org alias. Use the commit SHA for the org alias and the branch + test run id
# for the org name
TARGET_SCRATCH_ORG_ALIAS="ci-$HEROKU_TEST_RUN_COMMIT_VERSION"
TARGET_SCRATCH_ORG_NAME="Pipeline CI: $HEROKU_TEST_RUN_BRANCH $HEROKU_TEST_RUN_ID"

# Truncate org name to 80-chars
TARGET_SCRATCH_ORG_NAME=$(echo ${TARGET_SCRATCH_ORG_NAME:0:79})

debug "TARGET_SCRATCH_ORG_ALIAS: $TARGET_SCRATCH_ORG_ALIAS"
debug "TARGET_SCRATCH_ORG_NAME: $TARGET_SCRATCH_ORG_NAME"

whoami=$(whoami)
debug "WHOAMI: $whoami"

# Create a bin and vendor directory
mkdir -p $BUILD_DIR/bin

vendorDir="vendor/sfdx"
mkdir -p $BUILD_DIR/$vendorDir

# Go to BUILD_DIR
cd $BUILD_DIR

log "Parse sfdx.yml values ..."

# Parse sfdx.yml file into env
eval $(parse_yaml sfdx.yml)
# Display expected sfdx.yml vars
debug "scratch-org-def: $scratch_org_def"
debug "run-apex-tests: $run_apex_tests"
debug "delete-scratch-org: $delete_scratch_org"


# Set path for Dev Hub auth file
devHubAuthFile=$BUILD_DIR/$vendorDir/sfdxurl

# Create the scratch org for validation
# Authenticate to Dev Hub (for scratch org creation)
auth "$devHubAuthFile" "$SFDX_DEV_HUB_AUTH_URL" d huborg

# Create scratch org
invokeCmd "sfdx force:org:create -s -f \"$scratch_org_def\" -a $TARGET_SCRATCH_ORG_ALIAS orgName=\"$TARGET_SCRATCH_ORG_NAME\""

# Store credentials for scratch org
scratchSfdxAuthUrl=$(sfdx force:org:display --verbose -u $TARGET_SCRATCH_ORG_ALIAS --json | jq -r .result.sfdxAuthUrl)
debug "scratchSfdxAuthUrl: $scratchSfdxAuthUrl"

# Store credentials in file reflecting the source version
scratchOrgAuthFile=$BUILD_DIR/$vendorDir/$TARGET_SCRATCH_ORG_ALIAS
echo "$scratchSfdxAuthUrl" > $scratchOrgAuthFile
debug "stored in file: $scratchOrgAuthFile"

# If asked to run apex tests, create test setup and execution scripts if not found
testSetupScript=$BUILD_DIR/bin/test-setup.sh
testRunScript=$BUILD_DIR/bin/test.sh
if [ "$run_apex_tests" == "true" ];
then
  if [ ! -f $testSetupScript ]; then
    log "Creating $testSetupScript ..."
     echo "# Log testing org
sfdx force:org:display -u $TARGET_SCRATCH_ORG_ALIAS" > $testSetupScript
    chmod +x $testSetupScript
    cat $testSetupScript
  fi

  if [ ! -f $testRunScript ]; then
    log "Creating $testRunScript ..."
    cat > $testRunScript << EOF
sfdx force:apex:test:run -r tap -u $TARGET_SCRATCH_ORG_ALIAS --loglevel=error
exit_status=\$?

if [ "$delete_scratch_org" != "false" ]; then
  echo "# \$(sfdx force:org:delete -p -u $TARGET_SCRATCH_ORG_ALIAS --loglevel=error)"
fi

exit \$exit_status
EOF

    chmod +x $testRunScript
    cat $testRunScript
  fi
fi

# Create a Procfile if not already present, to execute release.sh
if [ ! -f $BUILD_DIR/Procfile ]; then
  log "Creating Procfile ..."
  echo "# Deploy source to production org.
release: ./"$vendorDir"/release.sh \"$TARGET_SCRATCH_ORG_ALIAS\" \"$SFDX_PACKAGE_VERSION_ID\"" > $BUILD_DIR/Procfile
fi

# copy scripts needed for release phase
log "Copying files for release phase ..."
cp $BP_DIR/lib/release.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/common.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/sfdx.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/stdlib.sh $BUILD_DIR/"$vendorDir"/

header "DONE! Completed in $(($SECONDS - $START_TIME))s"
exit 0
