#!/bin/bash
#
# Usage:
# bin/compile BUILD_DIR CACHE_DIR ENV_DIR
# - BUILD_DIR is the location of the app.
# - CACHE_DIR is a location the buildpack can use to cache build artifacts between builds.
# - ENV_DIR is a directory that contains a file for each of the applicationâ€™s configuration variables.
#
# The compile script is executed both for review apps permanent apps as the result of a deploy.
# Our STAGE config variable determines whether this is for a Review App or a 'real' app.
#
# The objective of compile is to create dependent scratch orgs and create additional
# executable scripts required during the release phase.

START_TIME=$SECONDS

# set -x
set -o errexit      # always exit on error
set -o pipefail     # don't ignore exit codes when piping output
unset GIT_DIR       # Avoid GIT_DIR leak from previous build steps

### Configure directories
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# set defaults for optional config vars
: ${OP_BUILDPACK_DEBUG:="false"}

### Load additional functions
source $BP_DIR/lib/common.sh
source $BP_DIR/lib/sfdx.sh
source $BP_DIR/lib/stdlib.sh

### Execute
header 'Welcome to the One Pipeline Buildpack'
log "Exporting environment directories ..."
export_env "$ENV_DIR"

# Setup local paths
log "Setting up paths ..."

debug "BUILD_DIR: $BUILD_DIR"
debug "CACHE_DIR: $CACHE_DIR"
debug "ENV_DIR: $ENV_DIR"
debug "BP_DIR: $BP_DIR"

setup_dirs "$BUILD_DIR"

# CLI details
debug "SFDX version: $(sfdx version)"
debug "Plugins: $(sfdx plugins --core)"

# Log config
debug "SFDX_DEV_HUB_AUTH_URL: $SFDX_DEV_HUB_AUTH_URL"
debug "STAGE: $STAGE"
debug "SOURCE_VERSION: $SOURCE_VERSION"
debug "SFDX_PACKAGE_NAME: $SFDX_PACKAGE_NAME"

# Set target org alias
# Use the HEROKU_APP_NAME config setting for the org alias and name.  If missing, default to
# SOURCE_VERSION which is the commit SHA for git deployed builds
TARGET_SCRATCH_ORG_ALIAS="ra-${HEROKU_APP_NAME:-$SOURCE_VERSION}"
TARGET_SCRATCH_ORG_NAME="Pipeline Review App: ${HEROKU_APP_NAME:-$SOURCE_VERSION}"

# Truncate org name to 80-chars
TARGET_SCRATCH_ORG_NAME=$(echo ${TARGET_SCRATCH_ORG_NAME:0:79})

debug "TARGET_SCRATCH_ORG_ALIAS: $TARGET_SCRATCH_ORG_ALIAS"
debug "TARGET_SCRATCH_ORG_NAME: $TARGET_SCRATCH_ORG_NAME"

whoami=$(whoami)
debug "WHOAMI: $whoami"

# Create a bin and vendor directory
mkdir -p $BUILD_DIR/bin

vendorDir="vendor/sfdx"
mkdir -p $BUILD_DIR/$vendorDir

# Go to BUILD_DIR
cd $BUILD_DIR

log "Parse sfdx.yml values ..."

# Parse sfdx.yml file into env
eval $(parse_yaml sfdx.yml)
debug "scratch-org-def: $scratch_org_def"

# Set path for Dev Hub auth file
devHubAuthFile=$BUILD_DIR/$vendorDir/sfdxurl

if [ "$STAGE" == "" ]; then
  # Review App. Create the scratch org for validation.
  log "Running in Review stage"

  # Authenticate to Dev Hub (for scratch org creation)

  auth "$devHubAuthFile" "$SFDX_DEV_HUB_AUTH_URL" d huborg

  # Create scratch org
  invokeCmd "sfdx force:org:create -s -f \"$scratch_org_def\" -a $TARGET_SCRATCH_ORG_ALIAS orgName=\"$TARGET_SCRATCH_ORG_NAME\""

  # Store creds for scratch org
  scratchSfdxAuthUrl=$(sfdx force:org:display --verbose -u $TARGET_SCRATCH_ORG_ALIAS --json | jq -r .result.sfdxAuthUrl)
  debug "scratchSfdxAuthUrl: $scratchSfdxAuthUrl"

  # Store credentials in file reflecting the source version
  scratchOrgAuthFile=$BUILD_DIR/$vendorDir/$TARGET_SCRATCH_ORG_ALIAS
  echo "$scratchSfdxAuthUrl" > $scratchOrgAuthFile
  debug "stored in file: $scratchOrgAuthFile"

elif [ "$STAGE" == "packaging" ] ; then
  # Dedicated packaging app compile.  Create the package version!
  log "Auth to dev hub ..."

  # Authenticate to Dev Hub (for package creation)
  auth "$devHubAuthFile" "$SFDX_DEV_HUB_AUTH_URL" d huborg

  pkgVersionCreateScript=$BUILD_DIR/bin/package-create.sh
  # run package version create
  if [ ! -f "$pkgVersionCreateScript" ];
  then

    # get package id
    CMD="sfdx force:package:list --json | jq '.result[] | select((.Name) == \"$SFDX_PACKAGE_NAME\")' | jq -r .Id"
    debug "CMD: $CMD"
    SFDX_PACKAGE_ID=$(eval $CMD)
    debug "SFDX_PACKAGE_ID: $SFDX_PACKAGE_ID"

    log "Creating new package version (this may take awhile) ..."

    # create package version
    CMD="sfdx force:package:version:create --package $SFDX_PACKAGE_ID --wait 100 --installationkeybypass --json | jq -r .result.SubscriberPackageVersionId"
    SFDX_PACKAGE_VERSION_ID=$(eval $CMD)
    debug "SFDX_PACKAGE_VERSION_ID: $SFDX_PACKAGE_VERSION_ID"

  else

    log "Calling $pkgVersionCreateScript"
    sh "$pkgVersionCreateScript" huborg "$STAGE"

  fi

fi

# Create script to delete scratch org. Referenced as 'pr-predestroy' script in app.json
orgDeleteScript=$BUILD_DIR/bin/delete-org.sh
log "Creating $orgDeleteScript"

cat > $orgDeleteScript << EOF
# Delete scratch org

# Auth to Dev Hub
if [ ! -f $devHubAuthFile ];
then
  mkdir -p $BUILD_DIR/$vendorDir
  echo "$SFDX_DEV_HUB_AUTH_URL" > $devHubAuthFile
fi
sfdx force:auth:sfdxurl:store -f $devHubAuthFile -a huborg -d

echo "Deleting Review app org $TARGET_SCRATCH_ORG_ALIAS" ...
sfdx force:org:delete -p -u $TARGET_SCRATCH_ORG_ALIAS --loglevel=error
EOF
chmod +x $orgDeleteScript

### Procfile & Release Phase

# if no Procfile, create one to invoke release.sh
if [ ! -f $BUILD_DIR/Procfile ]; then
  log "Creating Procfile ..."
  echo "# Deploy source to production org.
release: ./"$vendorDir"/release.sh \"$TARGET_SCRATCH_ORG_ALIAS\" \"$SFDX_PACKAGE_VERSION_ID\"" > $BUILD_DIR/Procfile
fi

# copy scripts needed for release phase
log "Copying files for release phase ..."
cp $BP_DIR/lib/release.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/common.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/sfdx.sh $BUILD_DIR/"$vendorDir"/
cp $BP_DIR/lib/stdlib.sh $BUILD_DIR/"$vendorDir"/

header "DONE! Completed in $(($SECONDS - $START_TIME))s"
exit 0
